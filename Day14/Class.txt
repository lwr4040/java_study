객체지향프로그래밍(OOP - Object Oriented Programming)
 - 객체 중심의 프로그램을 작성하는 방식
 - 객체끼리의 상호작용을 통하여 프로그램을 작성하는 방식

 - 부품화
 - 캡슐화 == 클래스
  - 속성과 기능을 하나의 블록으로 묶은것
 - 정보은닉
  - 속성과 기능을 보호하기 위해서 접근을 제한하는것
  - 프로그램의 안정적 구현을 위해서
 - 상속성
  - 클래스끼리 물려주거나 물려받는것..
 - 다형성
  - 다양한 형태나 성질
  - 하나의 객체를 여러개의 클래스로 표현하는것..

객체 (Object)
 - 사전적인 의미로는 현실세계에 존재하는 모든 것들.. 하나의 대상체들..
 - 어떠한 대상을 표현하기 위한 정보(속성)를 저장할 수 있는 공간과 그 공간을 컨트롤 할 수 있는 기능(메소드)을 하나의 루틴으로 묶은 개별적인 개체로써 표현되는 변수
	ex ) 정보(속성)을 저장할 수 있는 공간 : 스캐너의 sc
	      기능 (메소드) : .next() .nextInt()...
 - 클래스라는 사용자 정의 자료형으로 만들어진 변수..

클래스
 - 어떠한 대상을 표현하기 위한 정보(속성)를 저장할 수 있는 공간과 그 공간을 컨트롤 할 수 있는 기능(메소드)을 하나의 블록으로 묶어서 정의한 사용자 정의 자료형
	ex) Scanner , String.. ,Test01
 - 클래스의 구성요소
  - 속성 + 기능 + 보안(정보은닉)
  - 멤버변수 + 멤버메소드 + 접근지정자 = class ( 사용자 정의 자료형 )

 - 클래스 형식
	class 클래스명{
		멤버변수 - 데이터를 저장하는 공간..
	
		멤버 메소드 - 클래스의 기능을 정의한 코드의 집합
		 - 생성자 : 객체 생성시 객체를 준비하기 위한 멤버메소드..
		 - getter : 멤버 변수의 값을 반환하기 위한 메소드
		 - setter : 멤버 변수의 값을 셋팅하기 위한 메소드
		 - user메소드 : 사용자 필요에 의해 만들어지는 메소드..
	}

