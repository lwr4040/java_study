접근지정자 ( 접근제한자)
 - 정보은닉을 사용하기 위해서 사용되는 키워드..
 - 내가 원하든 원하지 않든 자동으로 적용된다.

 - 종류
  - private
   - 클래스 내부에서만 접근이 가능하고 외부에서는 모두 접근 불가
   - 일반적으로 별 다른 제약이 없으면 멤버 변수는 private로 설정한다 ***
  
  - protected
   - 상속받은 클래스에서는 접근 가능하고 그 외 외부에서는 모두 접근 불가..
   - 같은 패키지라면 접근 가능..
   - 상속에서 다시..

  - package(default)
   - 접근지정자 디폴트값
   - 내가 접근 지정자를 적지않으면 자동으로 적용되는 지정자
   - 패키지 내부에서만 접근이 가능하도록하는 지정자

  - public
   - 클래스 내부와 외부 모두 접근 허용
   - 다른 패키지에서 클래스를 import를 통하여 접근 가능하다.
   - 일반적으로 별 다른 제약이 없으면 멤버 메소드는 public으로 설정한다.***

---------------------------------------------------------------------------------------------------------------
setter
 - 멤버 변수의 값을 셋팅하는 메소드
 - 일반적으로 매개변수명은 멤버변수명과 동일하게 작성한다.
  - 상황에 따라서는 멤버변수명의 앞에 _를 붙이거나 줄임말을 사용하기도 한다.

 - 형식
	public void set멤버변수명(매개변수){ 코드정의 }

getter
 - 멤버 변수의 값을 반환받은 메소드

 - 형식
	public 자료형 get멤버변수명() { (코드정의) return 멤버변수; }
------------------------------------------------------------------------------------------------------------------------
생성자
 - 객체 생성시 호출하는 메소드		ex) Info in = new Info(); - 객체명 : in
 - 객체를 준비할때 사용된다.. 주로 멤버변수 초기화를 할때 사용한다.
 - 생성자는 객체 생성시에만 단 한번만 호출할 수 있다. **
 - 우리가 생성자를 정의하지 않으면 자동으로 생성자가 만들어진다.. - 디폴트 생성자
 - 생성자 안에서 다른 생성자를 호출할 수 있다. this..

 - 형식
	1. 반환 자료형이 존재하지않는다.. 반환 값이 없다..
	2. 메소드명은 반드시 클래스명과 동일하여야한다.
	3. 매개변수를 가질 수 있다.. 오버로드가 가능하다.. 여러개가 존재할 수 있다.
	 - 객체 생성시 상황에 따른 객체를 생성하기 위해서 여러개를 정의한다.

	public 클래스명(매개변수){
		코드정의;
	}
-------------------------------------------------------------------------------------------------
디폴트 생성자
 - 객체 생성 과정의 순서 유지를 위해서 자동으로 만들어진다.
 - 코드가 존재하지 않는다.. 기능이 없다..
 - 생성자를 하나라도 정의하면 디폴트 생성자는 만들어지지않는다 ***

	클래스명(){

	}

